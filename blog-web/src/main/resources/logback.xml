<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan属性：默认为true,Logback将会扫描配置文件，如果配置文件发生改变时，会自动加载
    scanPeriod:Logback扫描配置文件时间间隔，默认单位为毫秒，可配置单位为毫秒、秒、分、时 milliseconds, seconds, minutes or hours
    debug：默认为false,是否打印Logback内部信息，当为true时可以查看Logback的运行信息
    packagingData：默认false,在打印异常堆栈时是否打印相关包信息
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false" packagingData="true">
    <!-- 定义参数变量 -->
    <property name="APP-NAM" value="logback-demo"/>
    <!-- 日志级别参数 -->
    <property name="log.level" value="debug"/>
    <!-- 文件保留时间 -->
    <property name="log.maxHistory" value="30"/>
    <!-- 文件大小 -->
    <property name="log.maxSize" value="4MB"/>
    <!-- 日志文件是否覆盖 -->
    <property name="log.append" value="true"/>
    <!-- 日志输出编码 -->
    <property name="log.encode" value="GBK"/>
    <!-- 日志存储路径 -->
    <property name="log.filePath" value="D:/logs"/>
    <!-- 日志的显式格式 -->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}-%msg%n"/>

    <!--配置logger上下文名称，默认名称为default,用于区分不同应用程序的日志记录-->
    <contextName>${APP-NAM}</contextName>
    <!--获取时间戳字符串 key为名称  datePattern为将解析配置文件的时间作为当前时间格式化的标准-->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>

    <!-- consoleAppender：控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder:对日志日期格式化,类似于layout，除了将时间转化为数组，还会将转换后的数组输出到相应的文件中 -->
        <encoder>
            <!-- 定义日志的输出格式 -->
            <pattern>${log.pattern}</pattern>
            <!-- 设置信息编码 -->
            <charset>${log.encode}</charset>
        </encoder>
    </appender>

    <!-- 根Logger节点，最顶级-->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
    </root>

    <logger name="org.mybatis" level="${log.level}" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>

    <logger name="cn.aftertomorrow.dao" level="${log.level}" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>

</configuration>